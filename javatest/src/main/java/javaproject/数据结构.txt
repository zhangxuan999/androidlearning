hashcode 和equals
重写的时候要保证equals，那么hashcode是要相等的
但是hashcode相等，却不一定equals。存在hash碰撞
.hashmap在put的时候，如果hashcode相等，那么再判断是否equals，如果不equals，那么在同一槽位增加一个key，
如果hashcode相等，且euqals的话，那么就会替换。
因此可以理解hashcode本质作用是用散列算法，让hashcode分散在不同的槽位。
如果只写equals，但是hashcode不复写的话，默认是对象的物理地址，那么就算equals了，也会put两个，会导致只能通过key原本对象来找到这个value。
如果只写equals，但是hashcode一直返回同一个值的话，会导致所有的key都在同一个槽位。
如果不复写equals，但是hashcode复写的话，那么两个内容一样的key，hashcode一样，但是不equals，那么再同一槽位增加一个key。


hashset

treemap

hashmap遍历的四种方式
遍历HashMap的四种方式
public static void main(String[] args) {

Map<String, String> map = new HashMap<String, String>();
map.put("1", "value1");
map.put("2", "value2");
map.put("3", "value3");

//第一种：普遍使用，二次取值
System.out.println("通过Map.keySet遍历key和value：");
for (String key : map.keySet()) {
System.out.println("key= "+ key + " and value= " + map.get(key));
}

//第二种
System.out.println("通过Map.entrySet使用iterator遍历key和value：");
Iterator<Map.Entry<String, String>> it = map.entrySet().iterator();
while (it.hasNext()) {
Map.Entry<String, String> entry = it.next();
System.out.println("key= " + entry.getKey() + " and value= " + entry.getValue());
}

//第三种：推荐，尤其是容量大时
System.out.println("通过Map.entrySet遍历key和value");
for (Map.Entry<String, String> entry : map.entrySet()) {
System.out.println("key= " + entry.getKey() + " and value= " + entry.getValue());
}

//第四种
System.out.println("通过Map.values()遍历所有的value，但不能遍历key");
for (String v : map.values()) {
System.out.println("value= " + v);
}
}
   Map.entrySet() 这个方法返回的是一个Set<Map.Entry<K,V>>，Map.Entry 是Map中的一个接口，他的用途是表示一个映射项（里面有Key和Value），而Set<Map.Entry<K,V>>表示一个映射项的Set。Map.Entry里有相应的getKey和getValue方法，即JavaBean，让我们能够从一个项中取出Key和Value。



   优先级队列，按优先级出队，而不是fifo，先进先出。
   看病排队。

   堆，二叉堆，完全二叉树
   任意节点大于子节点的值，大根堆
   topk问题，从海量数据中找出前k个数据，利用堆来解决
   内存结构用数组来存放二叉堆，因为子元素和父元素的索引是有关系的。
